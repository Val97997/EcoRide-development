security:
    role_hierarchy:
        ROLE_ADMIN: [ROLE_EMPLOYEE, ROLE_DRIVER]
        ROLE_DRIVER: [ROLE_PASSENGER]
        ROLE_PASSENGER: [ROLE_USER]
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: pseudo
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: false
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # define access control for both the website admin and employees from the company :
    # same to restrict carshare creation to Drivers only, aswell as the registration of new vehicles for routes: 
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/employee, roles: ROLE_EMPLOYEE }
        - { path: ^/carshare/crud, roles: ROLE_DRIVER}
        - { path: ^/car/, roles: ROLE_DRIVER}
        - { path: ^/user, roles: ROLE_USER}
        - { path: ^/carshare, roles: ROLE_USER}
        - { path: ^/createAdmin, roles: ROLE_USER}
        # - { path: ^/search, roles: ROLE_USER}

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
